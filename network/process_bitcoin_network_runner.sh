############
# Bitcoin dat tools: Ivan Brugere, Dec 27 2012
# This code is unlicensed and unsupported; attribution is appreciated.
#
# This code processes binary-format Bitcoin .dat files generated by the Bitcoin client (http://bitcoin.org/, tested on v0.5.3.1 or lower)
# We use tools developed by Martin Harrigan (https://github.com/harrigan/bitcointools) which extends Gavin Andresen's bitcointools (https://github.com/gavinandresen/bitcointools)
# We also port and extend code by Harrigan and form a 'user network' according to the strategy in "An Analysis of Anonymity in the Bitcoin System" (Reid and Harrigan, 2011; http://arxiv.org/abs/1107.4524).
#
# This script runs under 3 hours and 10GB on a standard laptop. You can always try to move the "rows" matrix out of main memory by pickling rows to a bsddb, but at least three columns will need to be in memory for sort operations.
#

# Update: April 10 2013: Fixed underflow for small transactions

############
start=$(date +%s)

transactions_in="./bitcoin_transactions.txt" #raw file saved from bitcointools

file_path="./network_output/" #path of output files
transaction_keys="transactionkey_list.txt"  #key strings of transactions
pub_keys="pubkey_list.txt" #key strings of pubkeys
users_out="userkey_list.txt" #grouping of pubkeys into "users" (see: Reid and Harrigan 2011)
referents_out="user_edge_inputs.txt" #transaction keys of claimed inputs per transaction
referent_public_keys_out="user_edge_input_public_keys.txt" #public keys of claimed inputs per transaction
edges_out="user_edges.txt" #main data file


mkdir "$file_path"
python ./network/process_bitcoin_network.py ${transactions_in} ${file_path}${transaction_keys} ${file_path}${pub_keys} ${file_path}${users_out} ${file_path}${referents_out} ${file_path}${referent_public_keys_out} ${file_path}${edges_out} ${file_path}
end=$(date +%s)
diff=$(( $end - $start ))
echo "Completed execution in $diff seconds"

